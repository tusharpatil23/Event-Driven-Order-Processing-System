spring:
  application:
    name : order-service

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/order_management}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:root}

  jpa:
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:create}
    show-sql: true

  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: order-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringDeserializer



  resilience4j:
    retry:
      instances:
        kafkaProducer:
          maxAttempts: 3
          waitDuration: 2s
        inventoryCheck:
          maxAttempts: 3
          waitDuration: 2s

  circuitbreaker:
    instances:
      kafkaProducer:
        failureRateThreshold: 50
        waitDurationInOpenState: 20s
        permittedNumberOfCallsInHalfOpenState: 2
        slidingWindowSize: 10
      inventoryCheck:
        failureRateThreshold: 50
        waitDurationInOpenState: 20s
        permittedNumberOfCallsInHalfOpenState: 2
        slidingWindowSize: 10

management:
  endpoints:
    web:
      exposure:
        include: health, prometheus

  metrics:
    export:
      prometheus:
        enables: true

inventory:
  service:
    url: http://localhost:8080/api/v1/inventory